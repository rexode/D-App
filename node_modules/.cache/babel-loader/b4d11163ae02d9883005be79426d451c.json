{"ast":null,"code":"'use strict';\n\nconst modeToString = require('../lib/mode-to-string');\n\nconst parseMtime = require('../lib/parse-mtime');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write(path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest({\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: parseMtime(options.mtime)\n      }, controller, options.headers))\n    });\n    await res.text();\n  }\n\n  return write;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/files/write.js"],"names":["modeToString","require","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","write","path","input","options","controller","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAsBN,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAO,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C;AACA,UAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,UAAMS,MAAM,GAAGV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,aAAT,EAAwB;AACxCF,MAAAA,MADwC;AAExCG,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAER,IADyB;AAE9BS,QAAAA,cAAc,EAAE,IAFc;AAG9BC,QAAAA,KAAK,EAAER,OAAO,CAACS,MAHe;AAI9B,WAAGT;AAJ2B,OAAD,CAFS;AAQxC,UACE,MAAMV,gBAAgB,CAAC;AACrBoB,QAAAA,OAAO,EAAEX,KADY;AAErBD,QAAAA,IAAI,EAAE,KAFe;AAGrBa,QAAAA,IAAI,EAAEzB,YAAY,CAACc,OAAO,CAACW,IAAT,CAHG;AAIrBC,QAAAA,KAAK,EAAExB,UAAU,CAACY,OAAO,CAACY,KAAT;AAJI,OAAD,EAKnBX,UALmB,EAKPD,OAAO,CAACa,OALD,CADxB;AARwC,KAAxB,CAAlB;AAkBA,UAAMV,GAAG,CAACW,IAAJ,EAAN;AACD;;AACD,SAAOjB,KAAP;AACD,CA9ByB,CAA1B","sourcesContent":["'use strict'\n\nconst modeToString = require('../lib/mode-to-string')\nconst parseMtime = require('../lib/parse-mtime')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"]},"metadata":{},"sourceType":"script"}