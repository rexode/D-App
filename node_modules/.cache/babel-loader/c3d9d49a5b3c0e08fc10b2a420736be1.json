{"ast":null,"code":"'use strict';\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers))\n    });\n    await res.text();\n  };\n\n  return replace;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/config/replace.js"],"names":["fromString","uint8ArrayFromString","require","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","res","post","searchParams","JSON","stringify","headers","text"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,UAAU,EAAEC;AAAd,IAAuCC,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAsBL,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAACM,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,OAAO,GAAG,OAAOC,MAAP,EAAeC,OAAO,GAAG,EAAzB,KAAgC;AAC9C;AACA,UAAMC,UAAU,GAAG,IAAIP,eAAJ,EAAnB;AACA,UAAMQ,MAAM,GAAGT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AAEA,UAAMC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,gBAAT,EAA2B;AAC3CF,MAAAA,MAD2C;AAE3CG,MAAAA,YAAY,EAAEb,iBAAiB,CAACQ,OAAD,CAFY;AAG3C,UACE,MAAMV,gBAAgB,CAACF,oBAAoB,CAACkB,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACQ,OAAnE,CADxB;AAH2C,KAA3B,CAAlB;AAQA,UAAML,GAAG,CAACM,IAAJ,EAAN;AACD,GAdD;;AAgBA,SAAOX,OAAP;AACD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"]},"metadata":{},"sourceType":"script"}