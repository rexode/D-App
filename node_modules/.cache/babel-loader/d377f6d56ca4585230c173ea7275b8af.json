{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect(addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Strings\n    } = await res.json();\n    return Strings || [];\n  }\n\n  return disconnect;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/swarm/disconnect.js"],"names":["configure","require","toUrlSearchParams","module","exports","api","disconnect","addr","options","res","post","signal","searchParams","arg","headers","Strings","json"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,UAAf,CAA2BC,IAA3B,EAAiCC,OAAO,GAAG,EAA3C,EAA+C;AAC7C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,kBAAT,EAA6B;AAC7CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD6B;AAE7CC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEN,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFc;AAM7CM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AAN4B,KAA7B,CAAlB;AAQA,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMN,GAAG,CAACO,IAAJ,EAA1B;AAEA,WAAOD,OAAO,IAAI,EAAlB;AACD;;AACD,SAAOT,UAAP;AACD,CAlByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n"]},"metadata":{},"sourceType":"script"}