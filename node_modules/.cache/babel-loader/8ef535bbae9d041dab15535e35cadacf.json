{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body\n    } = await multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n\n    for await (const {\n      Root\n    } of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {\n            '/': Cid\n          },\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n\n  return dagImport;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/dag/import.js"],"names":["configure","require","toUrlSearchParams","abortSignal","multipartRequest","AbortController","CID","module","exports","api","dagImport","source","options","controller","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAC,yBAAD,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAUL,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,SAAjB,CAA4BC,MAA5B,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;AAChD,UAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,UAAMS,MAAM,GAAGX,WAAW,CAACU,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAA1B;AACA,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAoB,MAAMZ,gBAAgB,CAACO,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACG,OAA7B,CAAhD;AAEA,UAAME,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,YAAT,EAAuB;AACvCJ,MAAAA,MADuC;AAEvCC,MAAAA,OAFuC;AAGvCC,MAAAA,IAHuC;AAIvCG,MAAAA,YAAY,EAAEjB,iBAAiB,CAAC;AAAE,qBAAaU,OAAO,CAACQ;AAAvB,OAAD;AAJQ,KAAvB,CAAlB;;AAOA,eAAW,MAAM;AAAEC,MAAAA;AAAF,KAAjB,IAA6BJ,GAAG,CAACK,MAAJ,EAA7B,EAA2C;AACzC,UAAID,IAAI,KAAKE,SAAb,EAAwB;AACtB,cAAM;AAAEC,UAAAA,GAAG,EAAE;AAAE,iBAAKA;AAAP,WAAP;AAAqBC,UAAAA;AAArB,YAAqCJ,IAA3C;AAEA,cAAM;AACJK,UAAAA,IAAI,EAAE;AACJC,YAAAA,GAAG,EAAErB,GAAG,CAACsB,KAAJ,CAAUJ,GAAV,CADD;AAEJK,YAAAA,WAAW,EAAEJ;AAFT;AADF,SAAN;AAMD;AACF;AACF;;AAED,SAAOf,SAAP;AACD,CA/ByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst multipartRequest = require('../lib/multipart-request')\nconst { AbortController } = require('native-abort-controller')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"]},"metadata":{},"sourceType":"script"}