{"ast":null,"code":"'use strict';\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n/**\n * @typedef {import('ipfs-core-types/src/pubsub').MessageHandlerFn} MessageHandlerFn\n *\n * @typedef {Object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\n\nclass SubscriptionTracker {\n  constructor() {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map();\n  }\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n\n\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`);\n    } // Create controller so a call to unsubscribe can cancel the request\n\n\n    const controller = new AbortController();\n\n    this._subs.set(topic, [{\n      handler,\n      controller\n    }].concat(topicSubs)); // If there is an external signal, forward the abort event\n\n\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n\n    return controller.signal;\n  }\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n\n\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n\n      unsubs = subs;\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic);\n    }\n\n    unsubs.forEach(s => s.controller.abort());\n  }\n\n}\n\nmodule.exports = SubscriptionTracker;","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js"],"names":["AbortController","require","SubscriptionTracker","constructor","_subs","Map","subscribe","topic","handler","signal","topicSubs","get","find","s","Error","controller","set","concat","addEventListener","unsubscribe","subs","unsubs","filter","length","delete","forEach","abort","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAAEC,KAAF,EAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACjC,UAAMC,SAAS,GAAG,KAAKN,KAAL,CAAWO,GAAX,CAAeJ,KAAf,KAAyB,EAA3C;;AAEA,QAAIG,SAAS,CAACE,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlC,CAAJ,EAAgD;AAC9C,YAAM,IAAIM,KAAJ,CAAW,yBAAwBP,KAAM,oBAAzC,CAAN;AACD,KALgC,CAOjC;;;AACA,UAAMQ,UAAU,GAAG,IAAIf,eAAJ,EAAnB;;AAEA,SAAKI,KAAL,CAAWY,GAAX,CAAeT,KAAf,EAAsB,CAAC;AAAEC,MAAAA,OAAF;AAAWO,MAAAA;AAAX,KAAD,EAA0BE,MAA1B,CAAiCP,SAAjC,CAAtB,EAViC,CAYjC;;;AACA,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAiC,MAAM,KAAKC,WAAL,CAAiBZ,KAAjB,EAAwBC,OAAxB,CAAvC;AACD;;AAED,WAAOO,UAAU,CAACN,MAAlB;AACD;AAED;AACF;AACA;AACA;;;AACEU,EAAAA,WAAW,CAAEZ,KAAF,EAASC,OAAT,EAAkB;AAC3B,UAAMY,IAAI,GAAG,KAAKhB,KAAL,CAAWO,GAAX,CAAeJ,KAAf,KAAyB,EAAtC;AACA,QAAIc,MAAJ;;AAEA,QAAIb,OAAJ,EAAa;AACX,WAAKJ,KAAL,CAAWY,GAAX,CAAeT,KAAf,EAAsBa,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAA/B,CAAtB;;AACAa,MAAAA,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAA/B,CAAT;AACD,KAHD,MAGO;AACL,WAAKJ,KAAL,CAAWY,GAAX,CAAeT,KAAf,EAAsB,EAAtB;;AACAc,MAAAA,MAAM,GAAGD,IAAT;AACD;;AAED,QAAI,CAAC,CAAC,KAAKhB,KAAL,CAAWO,GAAX,CAAeJ,KAAf,KAAyB,EAA1B,EAA8BgB,MAAnC,EAA2C;AACzC,WAAKnB,KAAL,CAAWoB,MAAX,CAAkBjB,KAAlB;AACD;;AAEDc,IAAAA,MAAM,CAACI,OAAP,CAAeZ,CAAC,IAAIA,CAAC,CAACE,UAAF,CAAaW,KAAb,EAApB;AACD;;AApDuB;;AAuD1BC,MAAM,CAACC,OAAP,GAAiB1B,mBAAjB","sourcesContent":["'use strict'\n\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-core-types/src/pubsub').MessageHandlerFn} MessageHandlerFn\n *\n * @typedef {Object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nclass SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n\nmodule.exports = SubscriptionTracker\n"]},"metadata":{},"sourceType":"script"}