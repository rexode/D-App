{"ast":null,"code":"'use strict';\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function* refsLocal(options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: toCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    yield* res.ndjson();\n  }\n\n  return refsLocal;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/refs/local.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","refsLocal","options","res","post","signal","transform","searchParams","headers","ndjson"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,SAAjB,CAA4BC,OAAO,GAAG,EAAtC,EAA0C;AACxC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADuB;AAEvCC,MAAAA,SAAS,EAAEZ,OAF4B;AAGvCa,MAAAA,YAAY,EAAEV,iBAAiB,CAACK,OAAD,CAHQ;AAIvCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AAJsB,KAAvB,CAAlB;AAOA,WAAQL,GAAG,CAACM,MAAJ,EAAR;AACD;;AACD,SAAOR,SAAP;AACD,CAfyB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: toCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n"]},"metadata":{},"sourceType":"script"}