{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  multiaddr\n} = require('multiaddr');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nconst Multihashes = require('ipfs-core-utils/src/multihashes');\n\nconst Multibases = require('ipfs-core-utils/src/multibases');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst {\n  identity\n} = require('multiformats/hashes/identity');\n\nconst {\n  bases,\n  hashes,\n  codecs\n} = require('multiformats/basics');\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\n\n\nfunction create(options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  /** @type {MultibaseCodec[]} */\n\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  /** @type {BlockCodec[]} */\n\n  const blockCodecs = Object.values(codecs);\n  [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  /** @type {MultihashHasher[]} */\n\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  /** @type {IPFSHTTPClient} */\n\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n};","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/index.js"],"names":["CID","require","multiaddr","globSource","urlSource","Multicodecs","Multihashes","Multibases","dagPb","dagCbor","identity","bases","hashes","codecs","create","options","id","name","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","multibases","loadBase","blockCodecs","concat","codec","multicodecs","loadCodec","multihashHashers","hashers","hasher","multihashes","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { CID } = require('multiformats/cid')\nconst { multiaddr } = require('multiaddr')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n}\n"]},"metadata":{},"sourceType":"script"}