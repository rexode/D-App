{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function* (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args];\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    });\n    yield* res.ndjson();\n  };\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  });\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/refs/index.js"],"names":["CID","require","toCamel","configure","toUrlSearchParams","module","exports","api","opts","refs","args","options","argsArr","Array","isArray","res","post","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","ndjson","Object","assign","local"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,CAACI,GAAD,EAAMC,IAAN,KAAe;AACxC;AACF;AACA;AACE,QAAMC,IAAI,GAAG,iBAAkBC,IAAlB,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACjD;AACA,UAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA7C;AAEA,UAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,MAAT,EAAiB;AACjCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADiB;AAEjCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEP,OAAO,CAACQ,GAAR,CAAYD,GAAG,IAAK,GAAEA,GAAG,YAAYE,UAAf,GAA4BrB,GAAG,CAACsB,MAAJ,CAAWH,GAAX,CAA5B,GAA8CA,GAAI,EAAxE,CADyB;AAE9B,WAAGR;AAF2B,OAAD,CAFE;AAMjCY,MAAAA,OAAO,EAAEZ,OAAO,CAACY,OANgB;AAOjCC,MAAAA,SAAS,EAAEtB;AAPsB,KAAjB,CAAlB;AAUA,WAAQa,GAAG,CAACU,MAAJ,EAAR;AACD,GAfD;;AAiBA,SAAOC,MAAM,CAACC,MAAP,CAAclB,IAAd,EAAoB;AACzBmB,IAAAA,KAAK,EAAE3B,OAAO,CAAC,SAAD,CAAP,CAAmBO,IAAnB;AADkB,GAApB,CAAP;AAGD,CAxByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  })\n})\n"]},"metadata":{},"sourceType":"script"}