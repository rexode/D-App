{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat(options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    });\n    return toCoreInterface(await res.json());\n  }\n\n  return stat;\n});\n/**\n * @param {any} res\n */\n\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/'])),\n    peers: res.Peers || [],\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/bitswap/stat.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","stat","options","res","post","searchParams","signal","headers","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,IAAf,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,YAAY,EAAER,iBAAiB,CAACK,OAAD,CADU;AAEzCI,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFyB;AAGzCC,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHwB,KAAzB,CAAlB;AAMA,WAAOC,eAAe,CAAC,MAAML,GAAG,CAACM,IAAJ,EAAP,CAAtB;AACD;;AACD,SAAOR,IAAP;AACD,CAdyB,CAA1B;AAgBA;AACA;AACA;;AACA,SAASO,eAAT,CAA0BL,GAA1B,EAA+B;AAC7B,SAAO;AACLO,IAAAA,aAAa,EAAEP,GAAG,CAACQ,aADd;AAELC,IAAAA,QAAQ,EAAE,CAACT,GAAG,CAACU,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAAyB;AAAC;AAA+BC,IAAAA,CAAhC,KAAsCrB,GAAG,CAACsB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA/D,CAFL;AAGLE,IAAAA,KAAK,EAAGd,GAAG,CAACe,KAAJ,IAAa,EAHhB;AAILC,IAAAA,cAAc,EAAEC,MAAM,CAACjB,GAAG,CAACkB,cAAL,CAJjB;AAKLC,IAAAA,YAAY,EAAEF,MAAM,CAACjB,GAAG,CAACoB,YAAL,CALf;AAMLC,IAAAA,UAAU,EAAEJ,MAAM,CAACjB,GAAG,CAACsB,UAAL,CANb;AAOLC,IAAAA,QAAQ,EAAEN,MAAM,CAACjB,GAAG,CAACwB,QAAL,CAPX;AAQLC,IAAAA,eAAe,EAAER,MAAM,CAACjB,GAAG,CAAC0B,eAAL,CARlB;AASLC,IAAAA,eAAe,EAAEV,MAAM,CAACjB,GAAG,CAAC4B,eAAL;AATlB,GAAP;AAWD","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}