{"ast":null,"code":"'use strict';\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version(options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    }); // @ts-ignore server output is not typed\n\n    return toCamel(await res.json());\n  }\n\n  return version;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/version.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","version","options","res","post","signal","searchParams","headers","json"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,OAAf,CAAwBC,OAAO,GAAG,EAAlC,EAAsC;AACpC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFK;AAGpCK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHmB,KAApB,CAAlB,CADoC,CAOpC;;AACA,WAAOb,OAAO,CAAC,MAAMS,GAAG,CAACK,IAAJ,EAAP,CAAd;AACD;;AAED,SAAOP,OAAP;AACD,CAhByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-ignore server output is not typed\n    return toCamel(await res.json())\n  }\n\n  return version\n})\n"]},"metadata":{},"sourceType":"script"}