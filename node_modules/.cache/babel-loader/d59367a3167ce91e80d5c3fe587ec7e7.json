{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function* provide(cids, options = {\n    recursive: false\n  }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n\n      if (message.responses) {\n        message.responses = message.responses.map((\n        /** @type {{ ID: string, Addrs: string[] }} */\n        {\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((\n          /** @type {string} **/\n          a) => new Multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n\n      yield message;\n    }\n  }\n\n  return provide;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["Multiaddr","require","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","cidArr","Array","isArray","res","post","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","responses","ID","Addrs","id","addrs","a"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,OAAjB,CAA0BC,IAA1B,EAAgCC,OAAO,GAAG;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAA1C,EAAgE;AAC9D;AACA,UAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA5C;AAEA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MADwB;AAExCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEP,MAAM,CAACQ,GAAP,CAAWC,GAAG,IAAIA,GAAG,CAACC,QAAJ,EAAlB,CADyB;AAE9B,WAAGZ;AAF2B,OAAD,CAFS;AAMxCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AANuB,KAAxB,CAAlB;;AASA,eAAW,IAAIC,OAAf,IAA0BT,GAAG,CAACU,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGtB,OAAO,CAACsB,OAAD,CAAjB;;AACA,UAAIA,OAAO,CAACE,SAAZ,EAAuB;AACrBF,QAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBN,GAAlB,CAAsB;AAAC;AAA+C;AAAEO,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAhD,MAAmE;AAC3GC,UAAAA,EAAE,EAAEF,EADuG;AAE3GG,UAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcR,GAAd,CAAkB;AAAC;AAAuBW,UAAAA,CAAxB,KAA8B,IAAI/B,SAAJ,CAAc+B,CAAd,CAAhD;AAFoG,SAAnE,CAAtB,CAApB;AAID,OALD,MAKO;AACLP,QAAAA,OAAO,CAACE,SAAR,GAAoB,EAApB;AACD;;AACD,YAAMF,OAAN;AACD;AACF;;AAED,SAAOhB,OAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"]},"metadata":{},"sourceType":"script"}