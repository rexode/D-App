{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist(options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map((\n    /** @type {{ '/': string }} */\n    k) => CID.parse(k['/']));\n  }\n\n  return wantlist;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/bitswap/wantlist.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","wantlist","options","res","post","signal","searchParams","headers","json","Keys","map","k","parse"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,QAAf,CAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,GAAG,GAAG,MAAM,CAAC,MAAMH,GAAG,CAACI,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoC;AAEpDC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFqB;AAGpDK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHmC,KAA7B,CAAP,EAIdC,IAJc,EAAlB;AAMA,WAAO,CAACL,GAAG,CAACM,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;AAAC;AAA+BC,IAAAA,CAAhC,KAAsCjB,GAAG,CAACkB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAA3D,CAAP;AACD;;AACD,SAAOV,QAAP;AACD,CAdyB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n"]},"metadata":{},"sourceType":"script"}