{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function* gc(options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: res => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        };\n      }\n    });\n    yield* res.ndjson();\n  }\n\n  return gc;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/repo/gc.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","gc","options","res","post","signal","searchParams","headers","transform","err","Error","cid","Key","parse","ndjson"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,EAAjB,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACjC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFK;AAGpCK,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAHmB;AAIpCC,MAAAA,SAAS,EAAGL,GAAD,IAAS;AAClB,eAAO;AACLM,UAAAA,GAAG,EAAEN,GAAG,CAACO,KAAJ,GAAY,IAAIA,KAAJ,CAAUP,GAAG,CAACO,KAAd,CAAZ,GAAmC,IADnC;AAELC,UAAAA,GAAG,EAAE,CAACR,GAAG,CAACS,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuBlB,GAAG,CAACmB,KAAJ,CAAUV,GAAG,CAACS,GAAJ,CAAQ,GAAR,CAAV,CAAvB,GAAiD;AAFjD,SAAP;AAID;AATmC,KAApB,CAAlB;AAYA,WAAQT,GAAG,CAACW,MAAJ,EAAR;AACD;;AACD,SAAOb,EAAP;AACD,CApByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n"]},"metadata":{},"sourceType":"script"}