{"ast":null,"code":"'use strict';\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe(topic, handler, options = {}) {\n      // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      /** @type {(value?: any) => void} */\n\n      let done;\n      /** @type {(error: Error) => void} */\n\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      }); // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n\n      const ffWorkaround = setTimeout(() => done(), 1000); // Do this async to not block Firefox\n\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          // if there was no response, the subscribe failed\n          return;\n        }\n\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nasync function readMessages(response, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError || log;\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"names":["fromString","uint8ArrayFromString","require","toString","uint8ArrayToString","log","configure","toUrlSearchParams","module","exports","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","msg","ndjson","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}