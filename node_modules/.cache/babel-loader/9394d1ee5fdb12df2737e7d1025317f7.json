{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst configure = require('../lib/configure');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function* rmAll(source, options = {}) {\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          // non-streaming response\n          yield* pin.Pins.map((\n          /** @type {string} */\n          cid) => CID.parse(cid));\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return rmAll;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/pin/rm-all.js"],"names":["CID","require","configure","normaliseInput","toUrlSearchParams","module","exports","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,0CAAD,CAAlC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAACK,GAAG,IAAI;AAChC;AACF;AACA;AACE,kBAAiBC,KAAjB,CAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AAC5C,eAAW,MAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAjB,IAAwCT,cAAc,CAACM,MAAD,CAAtD,EAAgE;AAC9D,YAAMI,YAAY,GAAG,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAArB;AACAA,MAAAA,YAAY,CAACE,MAAb,CAAoB,KAApB,EAA4B,GAAEJ,IAAK,EAAnC;AAEA,UAAIC,SAAS,IAAI,IAAjB,EAAuBC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BC,MAAM,CAACL,SAAD,CAApC;AAEvB,YAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAJ,CAAS,QAAT,EAAmB;AACnCC,QAAAA,MAAM,EAAEV,OAAO,CAACU,MADmB;AAEnCC,QAAAA,OAAO,EAAEX,OAAO,CAACW,OAFkB;AAGnCR,QAAAA,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGM,OAD2B;AAE9BY,UAAAA,GAAG,EAAG,GAAEX,IAAK,EAFiB;AAG9BC,UAAAA;AAH8B,SAAD;AAHI,OAAnB,CAAlB;;AAUA,iBAAW,MAAMW,GAAjB,IAAwBL,GAAG,CAACM,MAAJ,EAAxB,EAAsC;AACpC,YAAID,GAAG,CAACE,IAAR,EAAc;AAAE;AACd,iBAAQF,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAa;AAAC;AAAsBC,UAAAA,GAAvB,KAA+B3B,GAAG,CAAC4B,KAAJ,CAAUD,GAAV,CAA5C,CAAR;AACA;AACD;;AACD,cAAM3B,GAAG,CAAC4B,KAAJ,CAAUL,GAAV,CAAN;AACD;AACF;AACF;;AACD,SAAOf,KAAP;AACD,CA/ByB,CAA1B","sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n"]},"metadata":{},"sourceType":"script"}