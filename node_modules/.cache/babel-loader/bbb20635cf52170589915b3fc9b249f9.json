{"ast":null,"code":"'use strict';\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs(options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    /** @type {{ Strings: string[] }} */\n\n    const {\n      Strings\n    } = await res.json();\n    return (Strings || []).map(a => new Multiaddr(a));\n  }\n\n  return localAddrs;\n});","map":{"version":3,"sources":["C:/Users/santi/Desktop/frontend_base_dapp/node_modules/ipfs-http-client/src/swarm/localAddrs.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","localAddrs","options","res","post","signal","searchParams","headers","Strings","json","map","a"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,UAAf,CAA2BC,OAAO,GAAG,EAArC,EAAyC;AACvC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,mBAAT,EAA8B;AAC9CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD8B;AAE9CC,MAAAA,YAAY,EAAET,iBAAiB,CAACK,OAAD,CAFe;AAG9CK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAH6B,KAA9B,CAAlB;AAMA;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAML,GAAG,CAACM,IAAJ,EAA1B;AAEA,WAAO,CAACD,OAAO,IAAI,EAAZ,EAAgBE,GAAhB,CAAoBC,CAAC,IAAI,IAAIjB,SAAJ,CAAciB,CAAd,CAAzB,CAAP;AACD;;AACD,SAAOV,UAAP;AACD,CAjByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => new Multiaddr(a))\n  }\n  return localAddrs\n})\n"]},"metadata":{},"sourceType":"script"}